import { parseTypeAnnotation, parseCommentBlock } from "./parser";
import { U_LINE_BREAK, MD_LINE_BREAK } from "./constant";

export function generateMarkdown(interfaceCollection: any[]) {
  const mdTitle = "## API";

  const mdTemplate = [
    "| 属性名 | 描述 | 类型 | 必需 | 默认值",
    "| ----------- | ----------- |---------- |---------- |---------- |",
  ];

  const extraInfo = [
    "The API Document is generated by typescript-doc-gen!",
    "Author: Oliver <matthrews@outlook.com>",
    "License: MIT",
    "Repo: https://github.com/Matthrews/typescript-doc-gen",
  ].join(MD_LINE_BREAK);

  const bodyContent: string[] = [];

  interfaceCollection.forEach((interfaceItem) => {
    const {
      id: { name = "" },
      body: { body: properties = [] },
    } = interfaceItem;
    const contents = [`### ${name}${U_LINE_BREAK}`].concat(mdTemplate);

    properties.forEach((property: any) => {
      const {
        optional,
        key: { name = "" },
        leadingComments,
        typeAnnotation: { typeAnnotation = {} },
      } = property;
      const type = parseTypeAnnotation(typeAnnotation);
      const required = optional ? "--" : "是";
      // 注意无注释的情况
      const [{ value = "" }] = leadingComments ?? [{ value: "" }];
      const comment = parseCommentBlock(value);
      const note = parseCommentBlock(value, "note");
      // comment + note
      const desc = `${comment ?? ""} ${note ? `${MD_LINE_BREAK} ${note}` : ""}`;

      const defaultValue = parseCommentBlock(value, "default") || "--";
      contents.push(
        `| ${name} | ${
          desc || "--"
        } | <code>${type}</code> | <code>${required}</code> | <code>${defaultValue}</code> |`
      );
    });

    contents.push(U_LINE_BREAK);

    bodyContent.push(contents.join(U_LINE_BREAK));
  });

  return [mdTitle].concat(bodyContent).concat(extraInfo).join(U_LINE_BREAK);
}
